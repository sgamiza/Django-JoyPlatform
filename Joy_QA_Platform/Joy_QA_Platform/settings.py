"""
Django settings for Joy_QA_Platform project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from __future__ import absolute_import, unicode_literals

import os
import djcelery
from django.conf.global_settings import SESSION_COOKIE_AGE
from Joy_QA_Platform import configs

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
#print(TEMPLATE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 该配置是django的安全配置，防止攻击用的，该值是startProject时用系统的某个算法产生的.
SECRET_KEY = 'n*7x_*eix+_j5ylmc@#kwgyyof$5o5hk)w)8=r^j^gvup^!5^c'

# SECURITY WARNING: don't run with debug turned on in production!
# 防止配置信息和调试信息暴露
DEBUG = True

# 限定请求中的host值,以防止黑客构造包来发送请求.只有在列表中的host才能访问.建议不要使用*通配符去配置
ALLOWED_HOSTS = ['*']

# Application definition
# 参考https://blog.csdn.net/u012605477/article/details/79466259
# 用中要加载的自带或者自己定制的app包路径列表；app的安装配置，即INSTALLED_APPS设置
# django.contrib.admin —— 管理站点。
# django.contrib.auth —— 认证系统。
# django.contrib.contenttypes —— 用于内容类型的框架。
# django.contrib.sessions —— 会话框架，session数据可以在数据库中的django_session表中查看。
# django.contrib.messages —— 消息框架。
# django.contrib.staticfiles —— 管理静态文件的框架

# TODO 弄清楚加载原理
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'django_celery_beat',
    'Joy_QA_Platform',
    'frame',
    'ApiManager',
    'djcelery',
    'guardian',
]

# web应用中需要加载的一些中间件列表.里面是django自带的或者定制的中间件包路径
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE_CLASSES = [
    'dwebsocket.middleware.WebSocketMiddleware'
]

ROOT_URLCONF = 'Joy_QA_Platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],

        },
    },
]

WSGI_APPLICATION = 'Joy_QA_Platform.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 此处重载是为了使我们的UserInfo生效
AUTH_USER_MODEL = "frame.UserInfo"

# 配置自定义认证后台
AUTHENTICATION_BACKENDS = (
    'frame.utils.operation.CustomBackend',
    'guardian.backends.ObjectPermissionBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': configs.DEBUG_DATABASES_NAME,     # 新建数据库名
            'USER': configs.DEBUG_DATABASES_USER,     # 数据库登录名
            'PASSWORD': configs.DEBUG_DATABASES_PWD,  # 数据库登录密码
            'HOST': configs.DEBUG_DATABASES_HOST,     # 数据库所在服务器ip地址
            'PORT': configs.DEBUG_DATABASES_PORT,     # 监听端口 默认3306即可
        }
    }
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),  # 静态文件额外目录
    )
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': configs.DATABASES_NAME,     # 新建数据库名
            'USER': configs.DATABASES_USER,     # 数据库登录名
            'PASSWORD': configs.DATABASES_PWD,  # 数据库登录密码
            'HOST': configs.DATABASES_HOST,     # 数据库所在服务器ip地址
            'PORT': configs.DATABASES_PORT,     # 监听端口 默认3306即可
        }
    }
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 别名，指的是在html引用的名称
STATIC_URL = '/static/'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
)

#djcelery 相关配置
SESSION_COOKIE_AGE = 30 * 60

djcelery.setup_loader()
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = 'Asia/Shanghai'
#Celery的默认broker是RabbitMQ
BROKER_URL = 'amqp://guest:guest@127.0.0.1:5672//' if DEBUG else 'amqp://dev:zwc123@192.168.91.45:5672//'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_TASK_RESULT_EXPIRES = 7200  # celery任务执行结果的超时时间，
CELERYD_CONCURRENCY = 1 if DEBUG else 10  # celery worker的并发数 也是命令行-c指定的数目 根据服务器配置实际更改 一般25即可
CELERYD_MAX_TASKS_PER_CHILD = 100  # 每个worker执行了多少任务就会死掉，建议数量可以大一些，比如200

# 发送邮件的setting设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.exmail.qq.com'
EMAIL_PORT = 465
EMAIL_HOST_USER = configs.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = configs.EMAIL_HOST_PASSWORD
EMAIL_FROM = configs.EMAIL_FROM

# 日志模块配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'file': {
            'format': '[%(asctime)s] [%(levelname)s] [%(funcName)s]  %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'file',
        },
        'debug_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': './logs/debug.log',
            'formatter': 'file',
        },
        'warn_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': './logs/warn.log',
            'when': 'D',  # 以天为单位切分日志文件
            'interval': 1,  # 每隔1天新建1份日志文件
            'backupCount': 0,  # 保留日志个数，默认的0是不会自动删除掉日志
            'formatter': 'file',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'warn_file'],
            'propagate': False,
        },
        'mLogger': {
            'handlers': ['console', 'debug_file', 'warn_file'],
            'level': 'DEBUG',
            'propaget': False,
        },
    },
}

# django-redis 组件配置，目前默认redis没有密码
# 相关资料参考文档 https://django-redis-chs.readthedocs.io/zh_CN/latest/
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': configs.REDIS_LOCATION,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
             "PASSWORD": configs.REDIS_PASSWORD,
             "IGNORE_EXCEPTIONS": True,
             "PICKLE_VERSION": -1  # Use the latest protocol version
        },
    },
}






